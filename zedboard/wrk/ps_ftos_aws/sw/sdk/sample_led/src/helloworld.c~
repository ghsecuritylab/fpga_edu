/*
 * Copyright (C) 2018 Xilinx, Inc.
 * Amazon FreeRTOS V1.4.7
 * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * http://aws.amazon.com/freertos
 * http://www.FreeRTOS.org
 */

#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

/* FreeRTOS includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "timers.h"
#include "queue.h"
#include "semphr.h"
//#include "FreeRTOS_IP.h"
//#include "FreeRTOS_Sockets.h"
//#include "FreeRTOS_DHCP.h"

/* Demo includes */
//#include "aws_demo_runner.h"

/* AWS library includes. */
// #include "aws_system_init.h" 
// #include "aws_logging_task.h" 
// #include "aws_clientcredential.h" 
// #include "platform_config.h" 
// #include "aws_dev_mode_key_provisioning.h" 

/* Xilinx includes. */
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"

/* Timer defines. */
#define TIMER_ID	1
#define DELAY_10_SECONDS	10000UL
#define DELAY_1_SECOND		1000UL
#define TIMER_CHECK_THRESHOLD	9


/* Logging Task Defines. */
//#define mainLOGGING_MESSAGE_QUEUE_LENGTH    ( 15 )
//#define mainLOGGING_TASK_STACK_SIZE         ( configMINIMAL_STACK_SIZE * 8 )

/* Unit test defines. */
//#define mainTEST_RUNNER_TASK_STACK_SIZE     ( configMINIMAL_STACK_SIZE * 16 )

/* The name of the devices for xApplicationDNSQueryHook. */
//#define mainDEVICE_NICK_NAME				"XilinxDemo"


/* Static arrays for FreeRTOS-Plus-TCP stack initialization for Ethernet network
 * connections are declared below. If you are using an Ethernet connection on your MCU
 * device it is recommended to use the FreeRTOS+TCP stack. The default values are
 * defined in FreeRTOSConfig.h. */

/* Default MAC address configuration.  The application creates a virtual network
 * connection that uses this MAC address by accessing the raw Ethernet data
 * to and from a real network connection on the host PC.  See the
 * configNETWORK_INTERFACE_TO_USE definition for information on how to configure
 * the real network connection to use. */

/*
const uint8_t ucMACAddress[ 6 ] =
{
    configMAC_ADDR0,
    configMAC_ADDR1,
    configMAC_ADDR2,
    configMAC_ADDR3,
    configMAC_ADDR4,
    configMAC_ADDR5
};
*/
/* The default IP and MAC address used by the application.  The address configuration
 * defined here will be used if ipconfigUSE_DHCP is 0, or if ipconfigUSE_DHCP is
 * 1 but a DHCP server could not be contacted.  See the online documentation for
 * more information. */
/*
static const uint8_t ucIPAddress[ 4 ] =
{
    configIP_ADDR0,
    configIP_ADDR1,
    configIP_ADDR2,
    configIP_ADDR3
};
static const uint8_t ucNetMask[ 4 ] =
{
    configNET_MASK0,
    configNET_MASK1,
    configNET_MASK2,
    configNET_MASK3
};
static const uint8_t ucGatewayAddress[ 4 ] =
{
    configGATEWAY_ADDR0,
    configGATEWAY_ADDR1,
    configGATEWAY_ADDR2,
    configGATEWAY_ADDR3
};
static const uint8_t ucDNSServerAddress[ 4 ] =
{
    configDNS_SERVER_ADDR0,
    configDNS_SERVER_ADDR1,
    configDNS_SERVER_ADDR2,
    configDNS_SERVER_ADDR3
};
*/

/* The queue used by the Tx and Rx tasks, as described at the top of this
file. */
//static TaskHandle_t xLEDBlinkTask;
//static TaskHandle_t xUARTTask;

/*-----------------------------------------------------------*/
static void prvLEDBlinkTask( void *pvParameters )
{
  XGpio gpio_ledsw;
  int switch_data = 0;

  XGpio_Initialize(&gpio_ledsw, XPAR_AXI_GPIO_0_DEVICE_ID);	//initialize first XGpio variable

  XGpio_SetDataDirection(&gpio_ledsw, 1, 0xFF);		//set first channel tristate buffer to input
  XGpio_SetDataDirection(&gpio_ledsw, 2, 0x00);		//set second channel tristate buffer to output
 
  
 for( ;; )
   {
     switch_data = XGpio_DiscreteRead(&gpio_ledsw, 1);	//get switch data
     XGpio_DiscreteWrite(&gpio_ledsw, 2, switch_data);	//write switch data to the LEDs
   }
}


/*-----------------------------------------------------------*/
static void prvUARTTask( void *pvParameters )
{
  XGpio gpio_btns;
  int button_data = 0;
  
  XGpio_Initialize(&gpio_btns,  XPAR_AXI_GPIO_1_DEVICE_ID);	//initialize second XGpio variable

  XGpio_SetDataDirection(&gpio_btns, 1, 0xFF);		//set first channel tristate buffer to input
 
  
 for( ;; )
   {
      button_data = XGpio_DiscreteRead(&gpio_btns, 1);	//get button data

      //print message dependent on whether one or more buttons are pressed
      if(button_data == 0b00000){} //do nothing

      else if(button_data == 0b00001)
         xil_printf("button 00 pressed\n\r");

      else if(button_data == 0b00010)
         xil_printf("button 01 pressed\n\r");

      else if(button_data == 0b00100)
         xil_printf("button 02 pressed\n\r");

      else if(button_data == 0b01000)
         xil_printf("button 03 pressed\n\r");

      else if(button_data == 0b10000)
              xil_printf("button 04 pressed\n\r");

      else
         xil_printf("multiple buttons pressed\n\r");
   }
}


int main()
{
     //const TickType_t x10seconds = pdMS_TO_TICKS( DELAY_10_SECONDS );
 
  /*------------------------------------------------------------*/
  xil_printf( "Hello from Freertos example main\r\n" );

  xTaskCreate( prvUARTTask,
	       ( const char * ) "UT",
	       1000,
	       NULL,
	       tskIDLE_PRIORITY,
	       NULL );
  
  xTaskCreate( prvLEDBlinkTask,
	       ( const char * ) "LB",
	       1000,
	       NULL,
	       tskIDLE_PRIORITY,
	       NULL );
  
  for( ;; );

  return 0;
}

/**
 * @brief User defined assertion call. This function is plugged into configASSERT.
 * See FreeRTOSConfig.h to define configASSERT to something different.
 */
void vAssertCalled(const char * pcFile,
	uint32_t ulLine)
{

	const uint32_t ulLongSleep = 1000UL;
	volatile uint32_t ulBlockVariable = 0UL;
	volatile char * pcFileName = (volatile char *)pcFile;
	volatile uint32_t ulLineNumber = ulLine;

	(void)pcFileName;
	(void)ulLineNumber;

	configPRINTF( ("vAssertCalled %s, %ld\n", pcFile, (long)ulLine) );
	fflush(stdout);

	/* Setting ulBlockVariable to a non-zero value in the debugger will allow
	* this function to be exited. */
	taskDISABLE_INTERRUPTS();
	{
		while (ulBlockVariable == 0UL)
		{
			vTaskDelay( pdMS_TO_TICKS( ulLongSleep ) );
		}
	}
	taskENABLE_INTERRUPTS();
}
/*-----------------------------------------------------------*/
